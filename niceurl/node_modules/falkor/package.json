{
  "name": "falkor",
  "version": "1.2.7",
  "keywords": [
    "javascript",
    "nodeunit",
    "http",
    "test",
    "functional"
  ],
  "description": "HTTP Level Functional Testing Library",
  "homepage": "https://github.com/Obvious/falkor",
  "repository": {
    "type": "git",
    "url": "https://github.com/Obvious/falkor.git"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "author": {
    "name": "Dan Pupius",
    "email": "dan@obvious.com",
    "url": "http://pupius.co.uk/"
  },
  "maintainers": [
    {
      "name": "Dan Pupius",
      "email": "dan@obvious.com",
      "url": "http://pupius.co.uk/"
    }
  ],
  "engine": {
    "node": "*"
  },
  "bin": {
    "falkor": "./bin/runner.js"
  },
  "scripts": {
    "test": "./node_modules/.bin/nodeunit ./tests/falkor_test.js"
  },
  "dependencies": {
    "colors": "0.6.0-1",
    "flags": "0.1.1",
    "nock": "0.17.2",
    "nodeunit": "0.8.0",
    "q": "0.9.2"
  },
  "main": "lib/falkor.js",
  "readme": "Falkor\n======\n\n[![Build Status](https://secure.travis-ci.org/Obvious/falkor.png)](http://travis-ci.org/Obvious/falkor)\n\nA HTTP level functional testing library using [nodejs](http://nodejs.org) and\n[nodeunit](https://github.com/caolan/nodeunit).\n\n1. Declaratively set request properties including headers and cookies.\n2. Easily send form-encoded data, JSON, or plain text.\n3. Use predefined evaluators to set expectations on the response.\n4. Use JSON-Schema to validate JSON.\n5. Write custom evaluators to do more advanced processing and validation.\n\nSuggested uses:\n\n1. Testing REST API end-points.\n2. Functional testing of the application layer.\n3. Automated smoke tests.\n4. Probers.\n\nInstall\n-------\n\n```\n$ npm install falkor\n$ npm test falkor\n```\n\nUsage\n-----\n\nThe main interface in Falkor is `falkor.fetch`.  It returns a nodeunit compatible function with\nextra methods hanging off it that can be used to define behavior and set expectations.\n\nTo create test cases simply write a nodeunit test file and use falkor to define test methods, e.g.:\n\n```\nvar falkor = require('falkor')\n\nexports.testGoogle = falkor.fetch('http://google.com')\n    .expectStatusCode(301)\n    .expectHeader('Location', 'http://www.google.com/')\n    .dump() // Not necessary, but useful for debugging.\n```\n\nThen to run the tests you can either use nodeunit or the test runner included with falkor.  The\nfalkor test runner is new as of `v1.2.0`, the main difference being that tests will be run in\nparallel.\n\n```\nnodeunit mytest.js\nnode_modules/.bin/falkor mytest.js\n```\n\nSee the `examples` folder for a few other examples.\n\nChanges\n-------\n\nHead on over to the wiki to see [what changed](https://github.com/Obvious/falkor/wiki/Change-Log)\nbetween NPM package versions.\n\nReference\n---------\n\nAs mentioned about the primary way to use Falkor is via the `falkor.fetch` method.  If you do\nnothing else the URL will be fetched via a GET request when the test is run.  The test will pass --\nregardless of HTTP response -- unless there is a network level failure.\n\nYou build up the test by specifying extra information about how the request should be made and then\nby defining expectations for the response.  If the actual response deviates from expectations the\ntests will fail.\n\n### Configuring the request\n\n#### .withMethod(httpMethod)\n\nSpecifies the HTTP method to use when making the request.\n\n#### .withHeader(name, value)\n\nSets a HTTP request header.  Can be called multiple times to set multiple headers.\n\n#### .setContentType(contentType)\n\nShort-cut for setting the Content-Type header of the request.  Note, that on its own this doesn't\nchange how the request payload will be sent.  See `withPayload`, `withFormEncodedPayload` and\n`withJsonPayload`.\n\n#### .withCookie(name, value)\n\nHelper for setting the cookie header.  Can be called multiple times to set multiple cookies.\n\n#### .withPayload(bufferOrUtf8String)\n\nSpecifies the request payload.  It can be either a `Buffer` or a string.  Strings are assumed to be\nUTF-8.  The payload will be sent regardless of HTTP method.  The Content-Length header will also be\nset accordingly.\n\n#### .withFormEncodedPayload(object)\n\nSets the request payload to be a form-encoded string based on the keys/values in the passed in\nobject.  This method will also set the Content-Type header to `application/x-www-form-urlencoded`.\n\n#### .withJsonPayload(object)\n\nSets the request payload to be a JSON string.  This method will also set the Content-Type header to\n`application/json`.\n\n\n### Setting expectations\n\n#### .expectStatusCode(statusCode)\n\nFails the test if the response doesn't have a specific status code.\n\n#### .expectHeader(name, value)\n\nFails the test if the response doesn't have a header with a specific value.  Can be specified\nmultiple times.\n\n#### .expectContentType(contentType, opt_charset)\n\nShortcut for asserting the content type matches.\n\n#### .expectPlainText()\n\nShortcut for `expectHeader('Content-Type', 'text/plain')`.\n\n#### .expectHtml()\n\nShortcut for `expectHeader('Content-Type', 'text/html')`.\n\n#### .expectJson()\n\nShortcut for `expectHeader('Content-Type', 'application/json')`.\n\n#### .expectHtmlWithCharset(opt_charset)\n\nSame as `expectHtml` but expects the charset to be set as well, defaults to wanting UTF-8.\n\n#### .expectJsonWithCharset(opt_charset)\n\nSame as `expectJson` but expects the charset to be set as well, defaults to wanting UTF-8.\n\n#### .expectBodyMatches(regExp)\n\nFails the test if the response body *doesn't* match the provided regular expression.\n\n#### .expectBodyDoesNotMatch(regExp)\n\nFails the test if the response body *does* match the provided regular expression.\n\n#### .expectXssiPrefix(prefix)\n\nFails the test if the response body doesn't begin with the provided XSSI prefix. The prefix will\nalso be stripped before the response body is parsed as JSON.\n\n#### .addJsonSchema(schemaPath)\n\nAdds a JSON schema (or an array of JSON schema) to be used later by $ref links in validateJson().\nEvery schema added using this method needs to have an id property.\n\n#### .validateJson(schemaPath)\n\nValidates the response body against a JSON schema.  The validator is taken from the Chromium project\nand implements a subset of the official spec.  See the file header in lib/json-schema/json-schema.js\nfor exact details on what is supported.\n\n#### .evaluate(fn)\n\nAdds an evaluator function that will be executed against the response.  The evaluator is passed the\nnodeunit test object, which can be used for executing assertions, and the response object.\n\nUse this method if none of the built in evaluators do quite what you want.\n\nFor example:\n\n```\nexports.testBBC = falkor.fetch('http://www.bbc.co.uk')\n    .evaluate(function (test, res) {\n      test.notEqual(res.headers['date'].substr(0, 3), 'Fri', 'This evaluator fails on Friday.')\n    })\n```\n\n\n### Other things\n\n#### .dump(opt_dumpBody)\n\nLogs out information about the request and response to the console.  Depending on what you are\nrequesting this can be quite noisy.  It is recommended you use it for debugging only.  By default\ndoesn't log response body.\n\n#### .setAsserter()\n\nBy default Falkor uses the nodeunit test object to execute assertions on.  In some cases you might\nwant to provide your own assertion object, but make sure to support the full interface.\n\nIf you want to use Falkor without nodeunit the best way is to construct and run a TestCase directly:\n\n```\nnew falkor.TestCase(url)\n    .withMethod('POST')\n    .expectBodyMatches(/fish and chips/)\n    .setAsserter(customAsserter)\n    .run()\n```\n\n#### falkor.setBaseUrl(url)\n\nSets the base URL from which other URLs are resolved.  This still allows you to specify absolute\nURLs in specific test methods but relative URLs will be resolved accordingly.\n\n#### falkor.setRootSchemaPath(path)\n\nSets the base path for where schemas should be resolved from.  e.g. to avoid having to specify\n`path.join(__dirname, 'some-schema.json')` repeatedly.\n\n#### falkor.newTestTemplate()\n\nA Test Template allows you to set up a set of configuration options and expectations that can then\nbe shared by multiple test cases.  Instead of calling `falkor.fetch(url)` to generate a test case\nyou call `template.fetch(url)` and the test case will inherit options from the template.\n\nExample:\n\n```\nvar formTest = falkor.newTestTemplate()\n    .withMethod('POST')\n    .withFormEncodedPayload(frmData)\n\nexports.testFormRequiresLogin_noCookies = formTest.fetch('/form')\n    .expectStatusCode(401)\n\nexports.testFormRequiresLogin_withCookies = formTest.fetch('/form')\n    .withCookie('auth_token', 'abce114f')\n    .expectStatusCode(200)\n```\n\n### Node unit quick reference\n\nEspecially helpful if you are writing your own evaluator functions or asserter:\n\n```\nok(value, [message]) - Tests if value is a true value.\nequal(actual, expected, [message]) - Tests shallow ( == ).\nnotEqual(actual, expected, [message]) - Tests shallow ( != ).\ndeepEqual(actual, expected, [message]) - Tests for deep equality.\nnotDeepEqual(actual, expected, [message]) - Tests for any deep inequality.\nstrictEqual(actual, expected, [message]) - Tests strict equality ( === ).\nnotStrictEqual(actual, expected, [message]) - Tests strict non-equality ( !== ).\nthrows(block, [error], [message]) - Expects block to throw an error.\ndoesNotThrow(block, [error], [message]) - Expects block not to throw an error.\nifError(value) - Tests if value is not a false value, throws if it is a true value.\n```\n\nTesting\n-------\n\nFalkor unit tests of course use nodeunit and can be found in `tests/falkor_test.js`.\n[Nock](http://github.com/flatiron/nock) is used to mock out the HTTP requests.\n\n```\n$ npm test # or\n$ nodeunit tests/falkor_test.js\n```\n\nContributing\n------------\n\nQuestions, comments, bug reports, and pull requests are all welcome.  Submit them at\n[the project on GitHub](https://github.com/Obvious/falkor/).  If you haven't contributed to an\n[Obvious](http://github.com/Obvious/) project before please head over to the\n[Open Source Project](https://github.com/Obvious/open-source#note-to-external-contributors) and fill\nout an OCLA (it should be pretty painless).\n\nBug reports that include steps-to-reproduce (including code) are the\nbest. Even better, make them in the form of pull requests.\n\nAuthor\n------\n\n[Dan Pupius](https://github.com/dpup)\n([personal website](http://pupius.co.uk/)), supported by\n[The Obvious Corporation](http://obvious.com/).\n\nLicense\n-------\n\nCopyright 2012 [The Obvious Corporation](http://obvious.com/).\n\nLicensed under the Apache License, Version 2.0.\nSee the top-level file `LICENSE.txt` and\n(http://www.apache.org/licenses/LICENSE-2.0).\n",
  "readmeFilename": "README.md",
  "_id": "falkor@1.2.7",
  "dist": {
    "shasum": "a769a23ee99fa884ef47a4827c5e0f60927b18fc"
  },
  "_from": "falkor@",
  "_resolved": "https://registry.npmjs.org/falkor/-/falkor-1.2.7.tgz"
}
